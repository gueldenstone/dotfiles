--[[
lvim is the global options object

Linters should be
filled in as strings with either
a global executable or a path to
an executable
]]
-- THESE ARE EXAMPLE CONFIGS FEEL FREE TO CHANGE TO WHATEVER YOU WANT

-- general
lvim.log.level = "warn"
lvim.format_on_save = true
lvim.colorscheme = "everforest"
vim.opt.relativenumber = true

-- lualine
lvim.builtin.lualine.style = "default"
lvim.builtin.lualine.sections.lualine_b = { "branch", "diff", "diagnostics" }

-- keymappings [view all the defaults by pressing <leader>Lk]
lvim.leader = "space"

-- disable cursors, but use up and down for scrolling
vim.api.nvim_set_keymap('', '<Up>', '<C-y>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('', '<Down>', '<C-e>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('', '<Left>', '<Nop>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('', '<Right>', '<Nop>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Left>', '<Nop>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Right>', '<Nop>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('i', '<Left>', '<Nop>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('i', '<Right>', '<Nop>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('', '<Left>', '<Nop>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('', '<Right>', '<Nop>', { noremap = true, silent = true })

-- keepcursor in the middle
vim.opt.scrolloff=30

-- diable mouse
vim.opt.mouse = ""
-- add your own keymapping
lvim.keys.normal_mode["<C-s>"] = ":w<cr>"

lvim.builtin.dashboard.active = true
lvim.builtin.notify.active = true
lvim.builtin.terminal.active = true
lvim.builtin.nvimtree.setup.view.side = "left"
lvim.builtin.nvimtree.show_icons.git = 0

-- if you don't want all the parsers change this to a table of the ones you want
lvim.builtin.treesitter.ensure_installed = {
  "bash",
  "c",
  "cpp",
  "javascript",
  "json",
  "lua",
  "python",
  "typescript",
  "tsx",
  "css",
  "rust",
  "java",
  "yaml",
}


-- setup clangd
-- some settings can only passed as commandline flags `clangd --help`
local clangd_flags = {
  "--all-scopes-completion",
  "--suggest-missing-includes",
  "--background-index",
  "--pch-storage=disk",
  "--cross-file-rename",
  "--log=info",
  "--completion-style=detailed",
  "--enable-config", -- clangd 11+ supports reading from .clangd configuration file
  "--clang-tidy",
  {{- if eq .chezmoi.hostname "lukas-mbp"}}
  "--query-driver=/Applications/ARM/**/arm-none-eabi*"
  {{- end}}
  -- "--clang-tidy-checks=-*,llvm-*,clang-analyzer-*,modernize-*,-modernize-use-trailing-return-type",
  -- "--fallback-style=Google",
  -- "--header-insertion=never",
}

local clangd_bin = "clangd"

local custom_on_attach = function(client, bufnr)
  require("lvim.lsp").common_on_attach(client, bufnr)
  local opts = { noremap = true, silent = true }
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>lh", "<Cmd>ClangdSwitchSourceHeader<CR>", opts)
end

local opts = {
  cmd = { clangd_bin, unpack(clangd_flags) },
  on_attach = custom_on_attach,
}

require("lvim.lsp.manager").setup("clangd", opts)

lvim.builtin.treesitter.ignore_install = { "haskell" }
lvim.builtin.treesitter.highlight.enabled = true

-- plugins
lvim.plugins = {
    {"sainnhe/everforest"},
    {"tpope/vim-repeat"},
    {
      "ggandor/lightspeed.nvim",
      event = "BufRead",
    },
}

-- debugging

-- termdebug
vim.cmd("packadd termdebug")
-- keymaps
vim.cmd("tnoremap <Esc> <C-\\><C-n>")
lvim.builtin.which_key.mappings["d"] = {
  name = "Debug",
  d = { "<cmd>Termdebug<cr>", "Start Termdebug" },
  b = { "<cmd>Break<cr>", "Insert Breakpoint" },
  c = { "<cmd>Clear<cr>", "Clear Termdebug" },
}
-- set gdb to local gdb
vim.cmd("let g:termdebugger = $GDB")

